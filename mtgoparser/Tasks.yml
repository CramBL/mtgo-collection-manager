version: '3'

tasks:
  # These tasks should be run from the root of the project
  # E.g. `task mtgoparser:build`

   print-build-vars:
      aliases: [bvars, print-bvars]
      desc: Print build configuration variables
      silent: true
      cmds:
         - echo "BUILD_MODE=${BUILD_MODE}"
         - echo "MTGOPARSER_BUILD_MODE=${MTGOPARSER_BUILD_MODE}"
         - echo "MTGOPARSER_BUILD_TESTS=${MTGOPARSER_BUILD_TESTS}"
         - echo "MTGOPARSER_GENERATOR=${MTGOPARSER_GENERATOR}"
         - echo "MTGOPARSER_IPO={{.MTGOPARSER_IPO}}"
         - echo "MTGOPARSER_ENABLE_COV=${MTGOPARSER_ENABLE_COV}"
         - echo "MTGOPARSER_EXCLUDE_BOOST_LIBS={{.MTGOPARSER_EXCLUDE_BOOST_LIBS}}"
         - echo "MTGOPARSER_LINKER=${MTGOPARSER_LINKER}"
         - echo "MTGOPARSER_USER_LINKER={{.MTGOPARSER_USER_LINKER}}"
      requires:
         vars: [BUILD_MODE,
               MTGOPARSER_GENERATOR,
               MTGOPARSER_IPO,
               MTGOPARSER_BUILD_MODE,
               MTGOPARSER_ENABLE_COV,
               MTGOPARSER_EXCLUDE_BOOST_LIBS,
               MTGOPARSER_LINKER,
               MTGOPARSER_USER_LINKER]

   build:
      aliases: [b]
      desc: Build MTGO Parser
      summary: |
         This task builds MTGO Parser with the default build configuration, including warnings as errors and static analysis.
      dir: mtgoparser
      deps: [print-build-vars]
      cmds:
         - task: generate-buildsystem
         - task: compile

   build-for-integration:
      aliases: [b-integration, b-int]
      desc: Build MTGO Parser for integration with the rest of the MTGO Collection Manager app
      summary: |
         This task builds MTGO Parser for integration with the rest of the MTGO Collection Manager app.

         The task is a convenience for building faster.

         It turns off warnings as errors and some static analysis in the interest of building faster. When using this
         build configuration, it is assumed that more thorough testing has been done on MTGO Parser in a more rigirous build.
      dir: mtgoparser
      deps: [print-build-vars]
      cmds:
         - task: generate-buildsystem-for-integration
         - task: compile

   generate-buildsystem:
      desc: Generate MTGO Parser build system
      internal: true
      dir: mtgoparser
      cmds:
         - echo "==> Generating MTGO Parser buildsystem..."
         - task: generate-buildsystem-template
           vars: {
                  GENERATOR: "${MTGOPARSER_GENERATOR}",
                  BUILD_MODE: Release,
                  IPO: "{{.MTGOPARSER_IPO}}",
                  PACKAGING_MAINTAINER_MODE: "${MTGOPARSER_PACKAGING_MAINTAINER_MODE}",
                  BUILD_TESTS: "${MTGOPARSER_BUILD_TESTS}",
                  ENABLE_COV: "${MTGOPARSER_ENABLE_COV}",
                  WARNINGS_AS_ERRORS: ON,
                  ENABLE_CLANG_TIDY: ON,
                  ENABLE_CPPCHECK: ON,
                  LINKER: "${MTGOPARSER_LINKER}",
                  USER_LINKER: "${MTGOPARSER_USER_LINKER}",
                  DEPLOYING_BINARY: "${MTGOPARSER_DEPLOYING_BINARY}"
               }
         - echo "=== Done generating MTGO Parser build system ==="

   generate-buildsystem-for-integration:
      desc: Generate MTGO Parser build system
      internal: true
      dir: mtgoparser
      cmds:
         - echo "==> Generating MTGO Parser buildsystem for integration..."
         - task: generate-buildsystem-template
           vars: {
                  GENERATOR: Ninja Multi-Config,
                  BUILD_MODE: Release,
                  IPO: "{{.MTGOPARSER_IPO}}",
                  PACKAGING_MAINTAINER_MODE: OFF,
                  BUILD_TESTS: "${MTGOPARSER_BUILD_TESTS}",
                  ENABLE_COV: OFF,
                  WARNINGS_AS_ERRORS: OFF,
                  ENABLE_CLANG_TIDY: OFF,
                  ENABLE_CPPCHECK: OFF,
                  LINKER: "${MTGOPARSER_LINKER}",
                  USER_LINKER: "${MTGOPARSER_USER_LINKER}",
                  DEPLOYING_BINARY: "${MTGOPARSER_DEPLOYING_BINARY}"
               }
         - echo "=== Done generating MTGO Parser build system for integration ==="
      requires:
         vars: [MTGOPARSER_GENERATOR,
               MTGOPARSER_IPO,
               MTGOPARSER_BUILD_MODE,
               MTGOPARSER_ENABLE_COV,
               MTGOPARSER_EXCLUDE_BOOST_LIBS,
               MTGOPARSER_LINKER,
               MTGOPARSER_USER_LINKER]

   generate-buildsystem-template:
      desc: Template for setting parameters for generating the MTGO Parser build system
      internal: true
      dir: mtgoparser
      vars:
         GENERATOR:          '{{default "Ninja Multi-Config" .GENERATOR}}'
         BUILD_MODE:         '{{default "Release" .BUILD_MODE}}'
         IPO:                '{{default "ON" .IPO}}'
         PACKAGING_MAINTAINER_MODE: '{{default "OFF" .PACKAGING_MAINTAINER_MODE}}'
         BUILD_TESTS:        '{{default "OFF" .BUILD_TESTS}}'
         ENABLE_COV:         '{{default "OFF" .ENABLE_COV}}'
         WARNINGS_AS_ERRORS: '{{default "ON" .WARNINGS_AS_ERRORS}}'
         ENABLE_CLANG_TIDY:  '{{default "ON" .ENABLE_CLANG_TIDY}}'
         ENABLE_CPPCHECK:    '{{default "ON" .ENABLE_CPPCHECK}}'
         LINKER:             '{{default "mold" .LINKER}}'
         USER_LINKER:        '{{default "OFF" .USER_LINKER}}'
         DEPLOYING_BINARY:   '{{default "OFF" .DEPLOYING_BINARY}}'

      cmds:
         - cmake -S .
                 -B build
                 -G "{{.GENERATOR}}"
                 -DCMAKE_BUILD_TYPE:STRING={{.BUILD_MODE}}
                 -Dmtgoparser_ENABLE_IPO={{.IPO}}
                 -Dmtgoparser_PACKAGING_MAINTAINER_MODE:BOOL={{.PACKAGING_MAINTAINER_MODE}}
                 -DBUILD_TESTING={{.BUILD_TESTS}}
                 -Dmtgoparser_ENABLE_COVERAGE:BOOL={{.ENABLE_COV}}
                 -Dmtgoparser_WARNINGS_AS_ERRORS:BOOL={{.WARNINGS_AS_ERRORS}}
                 -Dmtgoparser_ENABLE_CLANG_TIDY:BOOL={{.ENABLE_CLANG_TIDY}}
                 -Dmtgoparser_ENABLE_CPPCHECK:BOOL={{.ENABLE_CPPCHECK}}
                 -DBOOST_EXCLUDE_LIBRARIES="{{.MTGOPARSER_EXCLUDE_BOOST_LIBS}}"
                 -DUSER_LINKER_OPTION={{.LINKER}}
                 -Dmtgoparser_ENABLE_USER_LINKER:BOOL={{.USER_LINKER}}
                 -Dmtgoparser_DEPLOYING_BINARY={{.DEPLOYING_BINARY}}
      requires:
         vars: [GENERATOR,
               BUILD_MODE,
               IPO,
               PACKAGING_MAINTAINER_MODE,
               BUILD_TESTS,
               ENABLE_COV,
               WARNINGS_AS_ERRORS,
               ENABLE_CLANG_TIDY,
               ENABLE_CPPCHECK,
               LINKER,
               USER_LINKER]


   compile:
      desc: Compile MTGO Parser
      internal: true
      dir: mtgoparser
      cmds:
         - echo "==> Compiling MTGO Parser..."
         - cmake --build build --config ${MTGOPARSER_BUILD_MODE}
         - echo "=== Done compiling MTGO Parser ==="
      requires:
         vars: [MTGOPARSER_BUILD_MODE]

   test:
      aliases: [t]
      desc: Runs unit/module tests for MTGO Parser
      summary: |
         This task runs unit/module tests for MTGO Parser.

         It runs the following tasks:
         - test-util
         - test-json-parse
         - test-xml-parse
         - test-csv-parse
         - test-full-collection-parse

         All tasks are run regardless of whether or not a previous task failed. If any task fails, the task will fail.
      silent: true
      dir: mtgoparser/build
      cmds:
         - echo "==> Testing MTGO Parser..."
         - |
            FAILED_COUNT=0; PASSED_COUNT=0
            FAILED_TASKS_LIST=""; PASSED_TASKS_LIST=""

            run_test_task() {
                  if task "mtgoparser:$1"
                  then
                     ((++PASSED_COUNT))
                     PASSED_TASKS_LIST="${PASSED_TASKS_LIST}\n\t✔️ $1"
                  else
                     ((++FAILED_COUNT))
                     FAILED_TASKS_LIST="${FAILED_TASKS_LIST}\n\t❌ $1"
                  fi
            }

            run_test_task test-util
            run_test_task test-json-parse
            run_test_task test-xml-parse
            run_test_task test-csv-parse
            run_test_task test-full-collection-parse

            if [ ${FAILED_COUNT} -eq 0 ]
            then
                  echo "✅✅✅ All ${PASSED_COUNT} tasks completed successfully in MTGO Parser ✅✅✅"
                  echo -e "=== ${PASSED_COUNT} PASSED TESTS: ${PASSED_TASKS_LIST}"
            else
                  echo "=== ${PASSED_COUNT} task(s) passed in MTGO Parser ==="
                  echo -e "=== PASSED TASKS: ${PASSED_TASKS_LIST}"
                  echo "❗❗❗ ${FAILED_COUNT} task(s) failed in MTGO Parser ❗❗❗"
                  echo -e "=== FAILED TASKS: ${FAILED_TASKS_LIST}"
                  exit 1
            fi


   test-util:
      desc: Runs unit/module tests for MTGO Parser utility/general purpose functions
      silent: true
      dir: mtgoparser/build/test
      cmds:
         - echo "==> Testing MTGO Parser utility/general purpose functions by running /"${MTGOPARSER_BUILD_MODE}"/tests"
         - ./"${MTGOPARSER_BUILD_MODE}"/tests
         - echo "=== Done testing MTGO Parser utility/general purpose functions ==="

   test-json-parse:
      desc: Runs unit/module tests for MTGO Parser JSON parsing
      silent: true
      dir: mtgoparser/build/test
      cmds:
         - echo "==> Testing MTGO Parser JSON parsing by running /"${MTGOPARSER_BUILD_MODE}"/test_json_parse"
         - ./"${MTGOPARSER_BUILD_MODE}"/test_json_parse
         - echo "=== Done testing MTGO Parser JSON parsing ==="

   test-xml-parse:
      desc: Runs unit/module tests for MTGO Parser XML parsing
      silent: true
      dir: mtgoparser/build/test
      cmds:
         - echo "==> Testing MTGO Parser XML parsing by running /"${MTGOPARSER_BUILD_MODE}"/test_xml_parse"
         - ./"${MTGOPARSER_BUILD_MODE}"/test_xml_parse
         - echo "=== Done testing MTGO Parser XML parsing ==="

   test-csv-parse:
      desc: Runs unit/module tests for MTGO Parser CSV parsing
      silent: true
      dir: mtgoparser/build/test
      cmds:
         - echo "==> Testing MTGO Parser CSV parsing by running /"${MTGOPARSER_BUILD_MODE}"/test_csv_parse"
         - ./"${MTGOPARSER_BUILD_MODE}"/test_csv_parse
         - echo "=== Done testing MTGO Parser CSV parsing ==="

   test-full-collection-parse:
      desc: End-to-end test for MTGO Parser parsing a full collection
      silent: true
      dir: mtgoparser/build/test
      cmds:
         - echo "==> Testing MTGO Parser parsing a full collection by running /"${MTGOPARSER_BUILD_MODE}"/test_full_collection_parse"
         - ./"${MTGOPARSER_BUILD_MODE}"/test_full_collection_parse
         - echo "=== Done testing MTGO Parser parsing a full collection ==="


   benchmark:
      aliases: [bench]
      desc: Run MTGO Parser benchmark suite
      silent: true
      dir: mtgoparser/build/test
      cmds:
         - echo "==> Benchmarking MTGO Parser..."
         - task: benchmark-xml-parse
         - echo "=== Done benchmarking MTGO Parser ==="

   benchmark-xml-parse:
      desc: Run MTGO Parser benchmark suite for XML parsing
      silent: true
      dir: mtgoparser/build/test
      cmds:
         - echo "==> Benchmarking MTGO Parser XML parsing..."
         - ./${MTGOPARSER_BUILD_MODE}/benchmark_xml_parse [.]
         - echo "=== Done benchmarking MTGO Parser XML parsing ==="


   clean:
      aliases: [c]
      desc: Clean MTGO Parser build artifacts (not downloaded dependencies)
      dir: mtgoparser
      cmds:
         - echo "==> Cleaning MTGO Parser build artifacts... (not downloaded dependencies))"
         - cmd: find build -mindepth 1 -maxdepth 1 ! -name '_deps' -exec rm -rf {} +
           platforms: [linux, darwin]
         - cmd: pwsh -Command "& { Get-ChildItem build -Directory | Where-Object { $_.Name -ne '_deps' } | Remove-Item -Recurse -Force }"
           platforms: [windows]
         - echo "=== Done cleaning MTGO Parser build artifacts ==="

   clean-all:
      aliases: [c-all]
      prompt: Are you sure you want to clean all build artifacts AND delete downloaded dependencies (maybe you mtgoparser:clean is what you want)?
      desc: Clean MTGO Parser build artifacts AND downloaded dependencies
      dir: mtgoparser
      cmds:
         - echo "==> Cleaning MTGO Parser build artifacts AND downloaded dependencies..."
         - cmd: rm -rf build
           platforms: [linux, darwin]
         - cmd: pwsh -Command "Remove-Item build -Recurse -Force"
           platforms: [windows]
         - echo "=== Done cleaning MTGO Parser build artifacts ==="
