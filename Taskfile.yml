version: '3'

includes:
   mtgogetter: mtgogetter/Tasks.yml
   mtgoparser: mtgoparser/Tasks.yml
   mtgoupdater: mtgoupdater/Tasks.yml
   mtgogui: mtgogui/Tasks.yml

dotenv: ['build.env']

set: [pipefail]

output: prefixed

vars:
   RUST_VERSION_CMD:
      sh: rustc --version 2>/dev/null || echo "not found"
   RUST_VERSION:
      sh: echo {{ regexFind "[0-9]+\\.[0-9]+\\.[0-9]+" .RUST_VERSION_CMD | default `not found` }}

   GO_VERSION_CMD:
      sh: go version 2>/dev/null || echo "not found"
   GO_VERSION:
      sh: echo {{ regexFind "[0-9]+\\.[0-9]+\\.[0-9]+" .GO_VERSION_CMD | default `not found` }}

   CMAKE_VERSION_CMD:
      sh: cmake --version 2>/dev/null || echo "not found"
   CMAKE_VERSION:
      sh: echo {{ regexFind "[0-9]+\\.[0-9]+\\.[0-9]+" .CMAKE_VERSION_CMD | default `not found` }}

   CLANG_VERSION_CMD:
      sh: clang --version 2>/dev/null || echo "not found"
   CLANG_VERSION:
      sh: echo {{ regexFind "[0-9]+\\.[0-9]+\\.[0-9]+" .CLANG_VERSION_CMD | default `not found` }}

   GCC_VERSION_CMD:
      sh: gcc --version 2>/dev/null || echo "not found"
   GCC_VERSION:
      sh: echo {{ regexFind "[0-9]+\\.[0-9]+\\.[0-9]+" .GCC_VERSION_CMD | default `not found` }}

   MTGOPARSER_IPO: # Set to On for linux and windows but off for macos
      sh: if [ "{{OS}}" = "linux" ] || [ "{{OS}}" = "windows" ]; then echo "On"; else echo "Off"; fi
   MTGOPARSER_USER_LINKER: # Enable user linker for linux only
      sh: if [ "{{OS}}" = "linux" ]; then echo "On"; else echo "Off"; fi
   MTGOPARSER_EXCLUDE_BOOST_LIBS: serialization;asio;json;graph;log;property_tree;wave;contract;coroutine;date_time;fiber;locale;thread;type_erasure;test;url;python;compute;crc;dll;endian;lamda;fusion;geometry;gil;regex;iostreams;filesystem;program_options;random;math;multiprecision;mysql;stacktrace;cobalt;redis;



tasks:
   default:
   # Just lists the tasks
      desc: List tasks
      cmds: [task --list-all]

   build-devcontainer:
      aliases: [b-devcontainer]
      desc: Build the devcontainer image
      summary: |
         This task builds the devcontainer image used for development.

         The image is built from the .devcontainer/Dockerfile file.

         The image is tagged as mcm-devcontainer.
         Using the -f to point to the Dockerfile is required because the Dockerfile is not
         in the root directory. This way the project directory is correctly copied into the image.
      cmds:
         - echo "==> Building devcontainer image..."
         - docker build -t mcm-devcontainer -f .devcontainer/Dockerfile .
         - echo "=== Done building devcontainer image ==="
         - echo "=== Run the devcontainer with:"" ==="
         - echo "docker run --rm -it mcm-devcontainer"

   run-devcontainer:
      silent: true
      desc: Print description of how to run the devcontainer image
      cmds:
         - echo "==> Don't run the devcontainer through a Go task. Run it manually with:"
         - echo "docker run --rm -it mcm-devcontainer"

   build:
      aliases: [b]
      desc: Build all subprojects with the default build configuration, including warnings as errors and static analysis.
      deps: [mtgogetter:build, mtgoparser:build, mtgoupdater:build]
      cmds:
         - task: mtgogui:build
         - task: print-tool-versions
         - task: mtgoparser:print-build-vars
         - echo "=== Done building all subprojects ==="

   build-integration:
      aliases: [b-integration]
      desc: Build all subprojects for integration with the rest of the MTGO Collection Manager app.
      deps: [mtgogetter:build, mtgoparser:build-for-integration, mtgoupdater:build]
      cmds:
         - task: mtgogui:build
         - task: print-tool-versions
         - task: mtgoparser:print-build-vars
         - echo "=== Done building all subprojects for integration ==="

   test:
      aliases: [t]
      desc: Run all tests
      deps: [mtgogetter:test, mtgoparser:test, mtgoupdater:test, mtgogui:test]
      cmds:
         - echo "=== Done running all tests ==="

   print-tool-versions:
      aliases: [tver]
      desc: Print tool versions
      summary: |
         This task prints the versions of the tools used to build the project.

         Such as Rust, Go, CMake, Clang, GCC, etc.
      silent: true
      cmds:
         - echo "OS/Arch:" "{{OS}}/{{ARCH}}"
         - echo "  Rust :" "{{ .RUST_VERSION }} (min. ${RUST_MIN_VERSION})"
         - echo "  Go   :" "{{ .GO_VERSION }} (min. ${GO_MIN_VERSION})"
         - echo "C++"
         - echo "  - CLANG:" "{{ .CLANG_VERSION }} (min. ${LLVM_MIN_VERSION})"
         - echo "  - GCC  :" "{{ .GCC_VERSION }} (min. ${GCC_MIN_VERSION})"
         - echo "CMake:" "{{ .CMAKE_VERSION }} (min. ${CMAKE_MIN_VERSION})"
         - echo "CMake generator:" "${MTGOPARSER_GENERATOR}"
      requires:
         vars: [RUST_VERSION, RUST_MIN_VERSION,
               GO_VERSION, GO_MIN_VERSION,
               CMAKE_VERSION, CMAKE_MIN_VERSION,
               CLANG_VERSION, LLVM_MIN_VERSION,
               GCC_VERSION, GCC_MIN_VERSION,
               MTGOPARSER_GENERATOR]

   clean:
      aliases: [c]
      prompt: Are you sure you want to clean all build artifacts?
      desc: Clean build artifacts in all subprojects
      silent: true
      deps: [mtgogetter:clean, mtgoparser:clean, mtgoupdater:clean, mtgogui:clean]
      cmds:
         - echo "==> Done cleaning build artifacts..."

   archive-mtgo-collection-manager:
      aliases: [archive-bin]
      desc: Make an archive containing the MTGO Collection Manager binary.
      summary: |
         This task makes an archive containing the MTGO Collection Manager binary.

         The name of the archive is set by the PACKAGE_NAME environment variable.
      silent: true
      cmds:
         - task: archive-mtgo-collection-manager-windows
         - task: archive-mtgo-collection-manager-unix

   archive-mtgo-collection-manager-windows:
      internal: true
      desc: Make an archive with the MTGO Collection Manager binary on Windows
      summary: |
         This task makes an archive with the MTGO Collection Manager binary using Windows PowerShell functions.

         The name of the archive is set by the PACKAGE_NAME environment variable.
      platforms: [windows]
      cmds:
         - echo "==> Compressing MTGO Collection Manager..."
         # Create a temporary directory to hold the GUI binary
         - pwsh -Command "New-Item -Path .\mtgo-collection-manager -ItemType Directory"
         # Copy and rename the GUI binary
         - pwsh -Command "Copy-Item -Path .\mtgogui\target\release\mtgogui.exe -Destination .\mtgo-collection-manager"
         - pwsh -Command "Rename-Item -Path .\mtgo-collection-manager\mtgogui.exe -NewName mtgo-collection-manager.exe"
         # Make final archive
         - pwsh -Command "Compress-Archive -Path .\mtgo-collection-manager -DestinationPath .\'${PACKAGE_NAME}'.zip"
         # Cleanup the temporary folder
         - pwsh -Command "Remove-Item -Path .\mtgo-collection-manager -Recurse"
         - echo "=== Done compressing MTGO Collection Manager ==="
         - echo "=== Archive is located at ./${PACKAGE_NAME}.zip ==="
      requires:
         vars: [PACKAGE_NAME]

   archive-mtgo-collection-manager-unix:
      internal: true
      desc: Make an archive with the MTGO Collection Manager binary on MacOS/Linux.
      summary: |
         This task makes an archive with the MTGO Collection Manager binary using the zip command.

         The name of the archive is set by the PACKAGE_NAME environment variable.
      platforms: [darwin, linux]
      cmds:
         - mkdir -p mtgo-collection-manager
         - cp mtgogui/target/release/mtgogui mtgo-collection-manager/mtgo-collection-manager
         - zip -r ${PACKAGE_NAME}.zip mtgo-collection-manager
      requires:
         vars: [PACKAGE_NAME]
