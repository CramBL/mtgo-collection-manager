name: mtgoupdater-ci

on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
      - master
    branches:
      - develop
      - master

env:
  VERBOSE: 1

jobs:
    # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      mtgoupdater: ${{ steps.filter.outputs.mtgoupdater }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          mtgoupdater:
            - 'mtgoupdater/**'


  test-ubuntu:
    # Only run if there's changes to the Rust code (in /mtgoupdater)
    needs: changes
    if: ${{ needs.changes.outputs.mtgoupdater == 'true' }}
    runs-on: ubuntu-latest

    name: Build & Test Ubuntu
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: check & lint
        working-directory: ./mtgoupdater
        run: |
          cargo check --verbose
          cargo clean
          cargo clippy -- -D warnings --no-deps

          # Now build MTGO Parser and MTGO Getter before running MTGO Updater tests
      #  since the tests validate integration between MTGO Updater and Parser/Getter
      ## Build the MTGO Parser binary
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc-13
          cmake: true
          ninja: true
      - name: Configure CMake
        working-directory: ./mtgoparser
        run: >
          cmake -S .
          -B ./build
          -G "Ninja Multi-Config"
          -DBUILD_TESTING=OFF
          -Dmtgoparser_ENABLE_IPO=On
          -DCMAKE_BUILD_TYPE:STRING=Release
          -Dmtgoparser_PACKAGING_MAINTAINER_MODE:BOOL=ON
          -Dmtgoparser_ENABLE_COVERAGE:BOOL=false
          -DGIT_SHA:STRING=${{ github.sha }}
      - name: Build
        working-directory: ./mtgoparser
        run: >
          cmake --build ./build
          --config Release

      - name: Check CPP build artifacts
        working-directory: ./mtgoupdater
        run: |
          echo "ls ../mtgoparser/build/src"
          ls ../mtgoparser/build/src
          echo "ls ../mtgoparser/build/src/mtgo_preprocessor"
          ls ../mtgoparser/build/src/mtgo_preprocessor
          echo "ls ../mtgoparser/build/src/mtgo_preprocessor/Release"
          ls ../mtgoparser/build/src/mtgo_preprocessor/Release

      ## Build the MTGO Getter binary
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Build
        run: go build -C mtgogetter -v

      ## Run the integration tests
      - name: test
        working-directory: ./mtgoupdater
        run: |
          cargo test --verbose -- --nocapture

  test-windows:
    # Only run if there's changes to the Rust code (in /mtgoupdater)
    needs: changes
    if: ${{ needs.changes.outputs.mtgoupdater == 'true' }}
    runs-on: windows-2022

    name: Build & Test Windows
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: check & lint
        working-directory: ./mtgoupdater
        run: |
          cargo check --verbose
          cargo clean
          cargo clippy -- -D warnings --no-deps

          # Now build MTGO Parser and MTGO Getter before running MTGO Updater tests
      #  since the tests validate integration between MTGO Updater and Parser/Getter
      ## Build the MTGO Parser binary
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: msvc
          vcvarsall: true
          cmake: true
          ninja: true
      - name: Configure CMake
        working-directory: ./mtgoparser
        run: >
          cmake -S .
          -B ./build
          -G "Visual Studio 17 2022"
          -DBUILD_TESTING=OFF
          -Dmtgoparser_ENABLE_IPO=On
          -DCMAKE_BUILD_TYPE:STRING=Release
          -Dmtgoparser_PACKAGING_MAINTAINER_MODE:BOOL=ON
          -Dmtgoparser_ENABLE_COVERAGE:BOOL=false
          -DGIT_SHA:STRING=${{ github.sha }}
      - name: Build
        working-directory: ./mtgoparser
        run: >
          cmake --build ./build
          --config Release

      - name: Check CPP build artifacts
        working-directory: ./mtgoupdater
        run: |
          echo "ls ../mtgoparser/build/src"
          ls ../mtgoparser/build/src
          echo "ls ../mtgoparser/build/src/mtgo_preprocessor"
          ls ../mtgoparser/build/src/mtgo_preprocessor
          echo "ls ../mtgoparser/build/src/mtgo_preprocessor/Release"
          ls ../mtgoparser/build/src/mtgo_preprocessor/Release

      ## Build the MTGO Getter binary
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Build
        run: go build -C mtgogetter -v

      ## Run the integration tests
      - name: test
        working-directory: ./mtgoupdater
        run: |
          cargo test --verbose -- --nocapture

  test-macos:
    # Only run if there's changes to the Rust code (in /mtgoupdater)
    needs: changes
    if: ${{ needs.changes.outputs.mtgoupdater == 'true' }}
    runs-on: macos-12

    name: Build & Test MacOS
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: check & lint
        working-directory: ./mtgoupdater
        run: |
          cargo check --verbose
          cargo clean
          cargo clippy -- -D warnings --no-deps

      # Now build MTGO Parser and MTGO Getter before running MTGO Updater tests
      #  since the tests validate integration between MTGO Updater and Parser/Getter
      ## Build the MTGO Parser binary
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc-13
          cmake: true
          ninja: true
      - name: Configure CMake
        working-directory: ./mtgoparser
        run: >
          cmake -S .
          -B ./build
          -G "Ninja Multi-Config"
          -DBUILD_TESTING=OFF
          -Dmtgoparser_ENABLE_IPO=Off
          -DCMAKE_BUILD_TYPE:STRING=Release
          -Dmtgoparser_PACKAGING_MAINTAINER_MODE:BOOL=ON
          -Dmtgoparser_ENABLE_COVERAGE:BOOL=false
          -DGIT_SHA:STRING=${{ github.sha }}
      - name: Build
        working-directory: ./mtgoparser
        run: >
          cmake --build ./build
          --config Release

      - name: Check CPP build artifacts
        working-directory: ./mtgoupdater
        run: |
          echo "ls ../mtgoparser/build/src"
          ls ../mtgoparser/build/src
          echo "ls ../mtgoparser/build/src/mtgo_preprocessor"
          ls ../mtgoparser/build/src/mtgo_preprocessor
          echo "ls ../mtgoparser/build/src/mtgo_preprocessor/Release"
          ls ../mtgoparser/build/src/mtgo_preprocessor/Release

      ## Build the MTGO Getter binary
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Build
        run: go build -C mtgogetter -v

      ## Run the integration tests
      - name: test
        working-directory: ./mtgoupdater
        run: |
          cargo test --verbose -- --nocapture