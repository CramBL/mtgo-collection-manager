name: mtgoupdater-ci

on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
      - master
    branches:
      - develop
      - master

env:
  VERBOSE: 1

jobs:
    # JOB to run change detection
  change-detection:
    name: 🔎 Detect Code Changes before running CI Jobs 🔬
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      mtgoupdater: ${{ steps.filter.outputs.mtgoupdater }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          mtgoupdater:
            - 'mtgoupdater/**'


  Test:
    # Only run if there's changes to the Rust code (in /mtgoupdater)
    needs: change-detection
    if: ${{ needs.change-detection.outputs.mtgoupdater == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gcc-13
            generator: "Ninja Multi-Config"
            enable_ipo: On

          - os: macos-12
            compiler: llvm-15.0.3
            generator: "Ninja Multi-Config"
            enable_ipo: Off

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            enable_ipo: On


    name: ⚒️ Build & Test 📝
    steps:
      - uses: actions/checkout@v3
      - uses: moonrepo/setup-rust@v1
        with:
          components: clippy
      - name: 🍄 Check & Lint MTGO Updater 🩺
        working-directory: ./mtgoupdater
        run: |
          cargo check --verbose
          cargo clean
          cargo clippy -- -D warnings --no-deps

      # Now build MTGO Parser and MTGO Getter before running MTGO Updater tests
      #  since the tests validate integration between MTGO Updater and Parser/Getter
      ## Build the MTGO Parser binary
      - name: ⚙️ Setup C++ Tools
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
      - name: 🔧 Configure CMake
        working-directory: ./mtgoparser
        run: >
          cmake -S .
          -B ./build
          -G "${{matrix.generator}}"
          -Dmtgoparser_ENABLE_IPO=${{matrix.enable_ipo }}
          -DCMAKE_BUILD_TYPE:STRING=Release
          -DGIT_SHA:STRING=${{ github.sha }}
          -DBUILD_TESTING=OFF
          -Dmtgoparser_ENABLE_COVERAGE:BOOL=false
          -Dmtgoparser_PACKAGING_MAINTAINER_MODE:BOOL=OFF
          -Dmtgoparser_WARNINGS_AS_ERRORS:BOOL=OFF
          -Dmtgoparser_ENABLE_CLANG_TIDY:BOOL=OFF
          -Dmtgoparser_ENABLE_CPPCHECK:BOOL=OFF
      - name: Build ⚒️ MTGO Parser 🤓
        working-directory: ./mtgoparser
        run: >
          cmake --build ./build
          --config Release

      ## Build the MTGO Getter binary
      - name: Setup Go 🛠️ Toolchain
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Build ⚒️ MTGO Getter 🐹
        run: go build -C mtgogetter -v

      ## Run the integration tests
      - name: Test 📝 MTGO Updater
        working-directory: ./mtgoupdater
        run: |
          cargo test --verbose -- --nocapture