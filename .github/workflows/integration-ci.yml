name: integraton-ci

on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
      - master
    branches:
      - develop
      - master

env:
  VERBOSE: 1
  BUILD_MODE: Release
  MTGOPARSER_BUILD_TESTS: ON
  MTGOPARSER_DEPLOYING_BINARY: ON

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gcc-13
            enable_ipo: On

          - os: ubuntu-22.04
            compiler: llvm-17.0.2
            enable_ipo: On

          - os: macos-13
            compiler: gcc-13
            enable_ipo: Off

          - os: macos-13
            compiler: llvm-15.0.3
            enable_ipo: Off

          - os: windows-2022
            compiler: llvm-17.0.2
            enable_ipo: On


    name: Test
    steps:
      - uses: actions/checkout@v4
      - name: 🗻 Export constants as environment variables 🏝️
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'
      - uses: moonrepo/setup-rust@v1
      - uses: aminya/setup-cpp@v1
        with:
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Mold linker for Linux 🐧 builds
        if: runner.os == 'Linux'
        uses: rui314/setup-mold@v1

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Install development headers - Linux 🐧
        if: runner.os == 'Linux'
        run: source build-util/dev-ubuntu/install-ubuntu-fltk-dev-headers.sh

      - name: ⚒️ Build - 🍎🐧💻
        run: task build-integration

      - name: 📝 Test - 🍎🐧💻
        run: task test

      - name: 📦 Pack/Archive - 🍎🐧💻
        run: task archive-mtgo-collection-manager
        env:
          PACKAGE_NAME: ${{ matrix.os }}-${{ matrix.compiler }}-mtgo-cm

####                                   ####
#     🍎 MacOS upload   🍎🍎            #
####                                   ####
      - name: 📩 Upload - MacOS 🍎
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: macos-mtgo-collection-manager
          path: macos-13-${{ matrix.compiler }}-mtgo-cm.zip
          retention-days: 14

####                                      ####
#     🐧 Linux 🐧 upload   🐧🐧            #
####                                      ####
      - name: 📩 Upload - Linux 🐧
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-mtgo-collection-manager
          path: ubuntu-22.04-${{ matrix.compiler }}-mtgo-cm.zip
          retention-days: 14

####                                      ####
#     💻 Windows 💻  upload   💻💻         #
####                                      ####
      - name: 📩 Upload - Windows 💻
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-mtgo-collection-manager
          path: windows-2022-${{ matrix.compiler }}-mtgo-cm.zip
          retention-days: 14

  Test-cross-windows:
    runs-on: ubuntu-latest
    name: Test cross compile to windows
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2
      - name: 🗻 Export constants as environment variables 🏝️
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'

      - name: ⚙️ Build devcontainer - Linux 🐧
        run: just build-devcontainer
        env:
          USE_CLANG: 0

      - name: ⚒️ Build - 🐧💻
        # This doesn't actually build mtgogetter and parser for windows, but the important part is
        #  confirming cross-compilation abilities for fltk
        run: |
          just build-mtgogetter
          just build-mtgoparser
          just cross-compile-windows-xwin release
        env:
          USE_CLANG: 0

      - name: 📦 Pack/Archive - 🍎🐧💻
        run: just archive-cross-compile-windows-xwin ${PACKAGE_NAME}
        env:
          PACKAGE_NAME: windows-gcc-mtgo-cm

      - name: 📩 Upload - Linux-windows cross 💻🐧
        uses: actions/upload-artifact@v4
        with:
          name: windows-mtgo-collection-manager
          path: windows-gcc-mtgo-cm.zip
          retention-days: 14


