
name: mtgoparser-ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
      - master
    branches:
      - master
      - develop

env:
  CLANG_VERSION_MACOS: "15.0.3"
  VERBOSE: 1

jobs:
  # JOB to run change detection
  changes:
    name: 🔎 Detect Code Changes before running CI Jobs 🔬
    runs-on: ubuntu-22.04
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      mtgoparser: ${{ steps.filter.outputs.mtgoparser }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          mtgoparser:
            - 'mtgoparser/**'

  Test:
  # Only run if there's changes to the C++ code (in /mtgoparser)
    needs: changes
    if: ${{ needs.changes.outputs.mtgoparser == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        os:
          - ubuntu-22.04
          - windows-2022
        compiler:
          - llvm-17.0.6 # Latest version as of 2023-11-28 (last version of llvm-17)
          - gcc-13
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        packaging_maintainer_mode:
          - OFF
        build_shared:
          - OFF

        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: windows-2022
            compiler: gcc-13

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - os: macos-13
            build_type: Debug
            compiler: gcc-13
            gcov_executable: gcov
            enable_ipo: Off # IPO is not supported in GCC on MacOS
            generator: "Ninja Multi-Config"
            packaging_maintainer_mode: Off
            build_shared: Off

          - os: macos-13
            build_type: Debug
            compiler: llvm-15.0.3
            enable_ipo: Off
            generator: "Ninja Multi-Config"
            packaging_maintainer_mode: Off
            build_shared: Off


          - os: ubuntu-22.04
            compiler: gcc-13
            gcov_executable: "llvm-cov gcov" # simply putting "gcov" errors on Ubuntu with a segfault (exit -11 = SIGSEGV) as it's the wrong gcov version
            enable_ipo: On

          - compiler: llvm-17.0.6
            gcov_executable: "llvm-cov gcov"
            enable_ipo: On

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            packaging_maintainer_mode: OFF
            package_generator: TBZ2

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-22.04
            compiler: gcc-13
            generator: "Unix Makefiles"
            build_type: Debug
            gcov_executable: "llvm-cov gcov" # simply putting "gcov" errors on Ubuntu with a segfault (exit -11 = SIGSEGV) as it's the wrong gcov version
            packaging_maintainer_mode: On
            enable_ipo: On

          # Windows msvc builds
          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            packaging_maintainer_mode: On
            enable_ipo: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: On
            enable_ipo: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            packaging_maintainer_mode: Off
            enable_ipo: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: Off
            package_generator: ZIP
            enable_ipo: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: On
            enable_ipo: On
            build_shared: On


    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}
          generator: ${{ matrix.generator }}

      - name: 🗻 Export constants as environment variables 🏝️
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'

      - name: 🗻 Set EXCLUDE_BOOST_LIBS environment variable 🏝️
        run: |
          $env:EXCLUDE_BOOST_LIBS = Get-Content -Raw -Path "build-util/boost-exclude-libs.txt"
          Write-Output "EXCLUDE_BOOST_LIBS=$env:EXCLUDE_BOOST_LIBS" >> $env:GITHUB_ENV
        shell: pwsh

      - name: ⚙️ Setup C++ Tools - MacOS 🍎
        if: runner.os == 'macOS'
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: false
          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: 15.0.3
          cppcheck: true
          gcovr: true
          opencppcoverage: true


      - name: ⚙️ Setup C++ Tools - 💻 Windows & Linux 🐧
        if: runner.os == 'Linux' || runner.os == 'Windows'
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: true
          cppcheck: true

          gcovr: true
          opencppcoverage: true

      - name: Linux 🐧 - 🔧 Configure CMake
        if: runner.os == 'Linux'
        working-directory: ./mtgoparser
        run: >
          cmake -S .
          -B ./build
          -G "${{matrix.generator}}"
          -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }}
          -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}}
          -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}}
          -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }}
          -DGIT_SHA:STRING=${{ github.sha }}
          -DBOOST_EXCLUDE_LIBRARIES="${{ env.EXCLUDE_BOOST_LIBS }}"

      - name: 💻 Windows & MacOS 🍎 - 🔧 Configure CMake
        if: runner.os != 'Linux'
        working-directory: ./mtgoparser
        run: >
          cmake -S .
          -B ./build
          -G "${{matrix.generator}}"
          -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }}
          -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}}
          -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}}
          -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }}
          -DGIT_SHA:STRING=${{ github.sha }}
          -DBOOST_EXCLUDE_LIBRARIES="${{ env.EXCLUDE_BOOST_LIBS }}"

      - name: Build ⚒️ MTGO Parser 🤓
        working-directory: ./mtgoparser
        run: >
          cmake --build ./build
          --config ${{matrix.build_type}}


      - name: Unix 🐧🍎 Test & coverage
        if: runner.os != 'Windows'
        working-directory: ./mtgoparser/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: >
          ctest -C ${{matrix.build_type}} --verbose
          gcovr -j 2
          --delete
          --root ../
          --print-summary
          --xml-pretty
          --xml coverage.xml .
          --gcov-executable '${{ matrix.gcov_executable }}'
          --filter ../include/mtgoparser

      - name: Windows 💻 Test & coverage
        if: runner.os == 'Windows'
        working-directory: ./mtgoparser/build
        run: >
          OpenCppCoverage.exe --export_type cobertura:coverage.xml
          --cover_children
          -- ctest -C ${{matrix.build_type}} --verbose
          # --sources ..\include\mtgoparser*

      - name: 📦 CPack
        if: matrix.package_generator != ''
        working-directory: ./mtgoparser/build
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      - name: 📩 Upload package artifact (From CPack)
        if: matrix.package_generator != ''
        uses: actions/upload-artifact@v3
        with:
          name: packaged-mtgoparser
          path: |
            mtgoparser/build/mtgoparser-*
          retention-days: 7

      - name: 🚀 Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            ./mtgoparser/build/*-*${{ matrix.build_type }}*-*.*