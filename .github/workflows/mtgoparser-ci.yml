name: mtgoparser-ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
      - master
    branches:
      - master
      - develop

env:
  CLANG_TIDY_VERSION: "16.0.0"
  VERBOSE: 1


jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-22.04
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      mtgoparser: ${{ steps.filter.outputs.mtgoparser }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          mtgoparser:
            - 'mtgoparser/**'

  Test:
  # Only run if there's changes to the C++ code (in /mtgoparser)
    needs: changes
    if: ${{ needs.changes.outputs.mtgoparser == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        os:
          - ubuntu-22.04
          - macos-12
          - windows-2022
        compiler:
          - llvm-15
          - gcc-13
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        packaging_maintainer_mode:
          - OFF
        build_shared:
          - OFF

        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: windows-2022
            compiler: gcc-13

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc-13
            gcov_executable: gcov
            enable_ipo: On

          - compiler: llvm-15
            enable_ipo: Off
            gcov_executable: "llvm-cov gcov"

          - os: macos-12
            enable_ipo: Off

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            packaging_maintainer_mode: OFF
            package_generator: TBZ2

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-22.04
            compiler: gcc-13
            generator: "Unix Makefiles"
            build_type: Debug
            gcov_executable: gcov
            packaging_maintainer_mode: On
            enable_ipo: Off

          # Windows msvc builds
          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            packaging_maintainer_mode: On
            enable_ipo: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: On
            enable_ipo: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            packaging_maintainer_mode: Off

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: Off
            package_generator: ZIP

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: On
            enable_ipo: On
            build_shared: On


    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}
          generator: ${{ matrix.generator }}

      - name: mtgoparser
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'


      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}


          cppcheck: true

          gcovr: true
          opencppcoverage: true

      - name: Configure CMake
        run: |
          cd mtgoparser && cmake -S . -B ./build -G "${{matrix.generator}}" -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}} -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DGIT_SHA:STRING=${{ github.sha }}

      - name: Build
        run: |
          cd mtgoparser && cmake --build ./build --config ${{matrix.build_type}}